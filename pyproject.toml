[tool.poetry]
name = "sphinx-autosummary-autocollect"
version = "0.1.0"
description = "Sphinx plugin based on autosummary, that automatically collects symbols if non are provided ."
authors = ["Benedikt Fuchs <benedikt.fuchs.staw@hotmail.com>"]
license = "BSD-2-Clause"
readme = "README.md"
packages = [{ include = "sphinx_autosummary_autocollect" }]
repository = "https://github.com/helpmefindaname/python-template"

[tool.poetry.scripts]
python_template = "python_template.cli:main"

[tool.poetry.dependencies]
python = "^3.9"
sphinx = ">=7.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pytest-mypy = "^0.10.3"
pytest-ruff = "^0.4.1"
pytest-black-ng = "^0.4.1"
black = "^22.12.0"
ruff = "^0.6.4"
pytest-github-actions-annotate-failures = "^0.1.8"
pytest-xdist = "^3.1.0"
sphinx = "~7.4.0"  # pin sphinx version for development but not in package.
types-docutils = "^0.21.0.20240907"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120
target-version = ['py39']


[tool.ruff]
line-length = 120
target-version = 'py39'

[tool.pytest.ini_options]
addopts = "--mypy --black --ruff -n auto"
filterwarnings = [
    "error",
    "ignore:SelectableGroups dict interface is deprecated. Use select."
]  # Convert all warnings to errors, imo warnings that are not treated as errors will be ignored by most people.
# My approach is to throw an error and let the programmar check if the error is intended (then add it to the filterwarnings) or not (then fix it!)



[tool.mypy]
ignore_missing_imports = true
disallow_untyped_calls = true
warn_unused_ignores = true
warn_no_return = true
